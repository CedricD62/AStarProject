package pathFinding;

public class Limsa {

	public static void lancementLimsa() {
		
		// informations de dimention de la matrice
		 int nbrLigneGrille = 32;
		 int nbrColonnesGrille = 18;
		// coordonnées du points de départ
		 int numLigneDepart = 23;
		 int numColonneDepart = 3;
		// coordonnées du point d'arrivé
		 int numLigneArrive = 0;
		 int numColonneArrive = 10;
		// tableau à 2 dimension regroupant les obstacles dans la zone
		 int [][] obstableZone = {{0,0},{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},
				  {1,0},{1,1},{1,2},{1,3},{1,4},{1,5},{1,6},{1,8},{1,9},{1,12},{1,13},{1,14},{1,15},{1,16},{1,17},
				  {2,0},{2,1},{2,2},{2,3},{2,4},{2,5},{2,6},{2,8},{2,9},{2,11},{2,12},{2,13},{2,14},{2,15},{2,16},{2,17},
				  {3,0},{3,1},{3,2},{3,3},{3,4},{3,5},{3,12},{3,13},{3,14},{3,15},{3,16},{3,17},
				  {4,0},{4,1},{4,2},{4,3},{4,4},{4,5},{4,6},{4,10},{4,11},{4,13},{4,14},{4,15},{4,16},{4,17},
				  {5,0},{5,1},{5,2},{5,3},{5,4},{5,5},{5,6},{5,8},{5,9},{5,10},{5,12},{5,13},{5,14},{5,15},{5,16},{5,17},
				  {6,0},{6,1},{6,2},{6,3},{6,4},{6,5},{6,6},{6,8},{6,9},{6,11},{6,12},{6,13},{6,14},{6,15},{6,16},{6,17},
				  {7,0},{7,1},{7,2},{7,3},{7,4},{7,5},{7,6},{7,8},{7,9},{7,11},{7,12},{7,13},{7,14},{7,15},{7,16},{7,17},
				  {8,0},{8,1},{8,2},{8,3},{8,4},{8,5},{8,6},{8,8},{8,9},{8,11},{8,12},{8,13},{8,14},{8,15},{8,16},{8,17},
				  {9,0},{9,1},{9,2},{9,3},{9,4},{9,5},{9,8},{9,9},{9,15},{9,16},{9,17},
				  {10,2},{10,3},{10,4},{10,11},{10,12},{10,13},{10,14},{10,16},{10,17},
				  {11,3},{11,5},{11,6},{11,7},{11,8},{11,9},{11,10},{11,11},
				  {12,0},{12,5},{12,6},{12,7},{12,8},{12,9},{12,12},{12,15},{12,16},{12,17},
				  {13,0},{13,5},{13,6},{13,7},{13,8},{13,10},{13,11},{13,12},{13,15},
				  {14,0},{14,1},{14,2},{14,6},{14,7},{14,8},{14,10},{14,11},{14,12},{14,15},
			   	  {15,0},{15,3},{15,4},{15,7},{15,8},{15,10},{15,11},{15,12},{15,15},
				  {16,2},{16,3},{16,4},{16,5},{16,6},{16,9},{16,10},{16,11},{16,12},{16,13},{16,15},
				  {17,2},{17,3},{17,4},{17,5},{17,6},{17,7},{17,9},{17,10},{17,11},{17,12},{17,13},{17,15},{17,17},
				  {18,0},{18,1},{18,2},{18,3},{18,4},{18,5},{18,6},{18,9},{18,10},{18,11},{18,12},{18,14},{18,15},{18,16},
				  {19,0},{19,1},{19,2},{19,3},{19,4},{19,5},{19,6},{19,9},{19,10},{19,11},{19,12},{19,14},{19,15},{19,16},
				  {20,0},{20,1},{20,2},{20,3},{20,4},{20,5},{20,11},{20,12},{20,14},{20,15},{20,16},
				  {21,0},{21,1},{21,2},{21,3},{21,4},{21,5},{21,6},{21,7},{21,11},{21,12},{21,14},{21,15},{21,16},
				  {22,0},{22,1},{22,2},{22,3},{22,4},{22,5},{22,6},{22,7},{22,10},{22,11},{22,12},{22,13},{22,15},{22,16},
				  {23,0},{23,1},{23,2},{23,4},{23,5},{23,6},{23,10},{23,11},{23,12},{23,13},{23,14},{23,16},
			 	  {24,0},{24,1},{24,4},{24,5},{24,7},{24,8},{24,14},{24,15},{24,17},
				  {25,0},{25,1},{25,4},{25,6},{25,7},{25,8},{25,9},{25,10},{25,11},{25,12},{25,13},
				  {26,0},{26,1},{26,5},{26,6},{26,7},{26,8},{26,9},{26,10},{26,11},{26,12},{26,13},{26,14},{26,15},
				  {27,0},{27,1},{27,4},{27,5},{27,6},{27,7},{27,8},{27,9},{27,10},{27,17},
				  {28,0},{28,4},{28,5},{28,6},{28,7},{28,8},{28,9},{28,11},{28,12},{28,13},{28,14},{28,16},{28,17},
				  {29,0},{29,1},{29,2},{29,4},{29,5},{29,6},{29,7},{29,8},{29,10},{29,11},{29,12},{29,13},{29,15},{29,16},{29,17},
				  {30,0},{30,1},{30,2},{30,3},{30,9},{30,10},{30,11},{30,12},{30,13},{30,16},{30,17},
				  {31,0},{31,1},{31,2},{31,3},{31,4},{31,5},{31,6},{31,7},{31,8},{31,9},{31,10},{31,11},{31,12},{31,13},{31,16},{31,17}};
		 // tableau à 1 dimension renseignant les nibeai minimum et maximum par case ( block de 2 valeur pour 1 case en partant de la coordonnée "0.0")
		 int [] niveauZone =  {0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,45,50 ,45,50 ,45,50 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,45,50 ,0,0 ,0,0 ,45,50 ,45,50 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,45,50 ,0,0 ,0,0 ,45,50 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,45,50 ,45,50 ,45,50 ,45,50 ,45,50 ,45,50 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,45,50 ,45,50 ,45,50 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,40,45 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,20,25 ,20,25 ,0,0 ,0,0 ,40,45 ,40,45 ,1,1 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0,
					45,50 ,45,50 ,0,0 ,0,0 ,0,0 ,1,1 ,20,25 ,20,25 ,1,1 ,1,1 ,40,45 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0,
					45,50 ,45,50 ,45,50 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,35,40 ,35,40 ,35,40 ,35,40,
					0,0, 45,50 ,45,50 ,15,20 ,15,20 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,0,0 ,35,40 ,35,40 ,0,0 ,0,0 ,0,0,
					0,0, 45,50 ,45,50 ,15,20 ,15,20 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,35,40 ,35,40 ,0,0 ,30,35 ,30,35,
					0,0, 0,0 ,0,0 ,15,20 ,15,20 ,10,15 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,35,40 ,35,40 ,0,0 ,30,35 ,30,35,
					0,0, 25,30 ,1,1 ,0,0 ,0,0 ,10,15 ,10,15 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,35,40 ,35,40 ,0,0 ,30,35 ,30,35,
					25,30, 25,30 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,35,40 ,0,0 ,30,35 ,30,35,
					25,30, 25,30,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,1,1 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,10,15 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,1,1,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,10,15 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,1,1,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,10,15 ,5,10 ,5,10 ,5,10 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,1,1,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,5,10 ,5,10 ,5,10 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,1,1,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,5,10 ,5,10 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,1,1,
					0,0, 0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,1,5 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,1,1,
					0,0, 0,0 ,1,1 ,1,1 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,1,5 ,1,1 ,1,1 ,1,1 ,1,1 ,0,0 ,0,0 ,1,1 ,0,0,
					0,0, 0,0 ,1,1 ,1,1 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,5,10 ,5,10,
					0,0, 0,0 ,1,1 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,5,10 ,5,10,
					0,0, 0,0 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,1,1 ,1,1 ,1,5 ,5,10 ,0,0,
					0,0, 1,1 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,1,5 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,1,5 ,0,0 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,1,1 ,1,1 ,1,1 ,1,1 ,1,1 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,10,15 ,0,0 ,0,0,
					0,0, 0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,0,0 ,10,15 ,10,15 ,0,0 ,0,0};
		
		// les informations sont insérées dans le constructeur Methode pour le lancement de d'A*
		Methodes aStar = new Methodes(nbrLigneGrille, nbrColonnesGrille, numLigneDepart, numColonneDepart, numLigneArrive, numColonneArrive,obstableZone,niveauZone);
		
		// lancement des différentes méthodes de traitement
		aStar.affichageMatrice();  // affichage de la matrice
		aStar.algorithme();        // apprication de l'algorithme
		aStar.affichageCoutCase(); // affichage des coûts de déplacements 
		aStar.affichageChemin();   // affichage de la solution
		
		
		}
	
}
